<?php

/**
 * @file
 * External-use icons module.
 */

/**
 * Gets the icon manager singleton.
 *
 * Use the returned object when requiring data about icons.
 *
 * @return ExIconsManager
 *   The icon manager singleton object.
 */
function ex_icons_get_manager() {
  static $manager;

  if (!isset($manager)) {
    $manager = new ExIconsManager();
  }

  return $manager;
}

/**
 * Implements hook_menu().
 */
function ex_icons_menu() {
  $items['admin/config/media/ex-icons-settings'] = array(
    'title' => 'External-use Icons Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ex_icons_settings_form'),
    'access arguments' => array('administer ex icons settings'),
    'file' => 'ex_icons.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function ex_icons_permission() {
  return array(
    'administer ex icons settings' => array(
      'title' => t('Administer External-use Icons settings'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function ex_icons_theme() {
  return array(
    'ex_icon' => array(
      'variables' => array(
        'id' => NULL,
        'attributes' => array(),
      ),
    ),
  );
}

/**
 * Implements template_preprocess_HOOK() for theme_ex_icon().
 */
function template_preprocess_ex_icon(&$variables) {
  $icons_manager = ex_icons_get_manager();
  $variables['sheet_url'] = $icons_manager->getSheetUrl();

  // Add a role attribute if it does not exist.
  if (!isset($variables['attributes']['role'])) {
    $variables['attributes']['role'] = isset($variables['attributes']['title'])
      ? 'img'
      : 'presentation';
  }

  $dimension_keys = &drupal_static(__FUNCTION__, array_flip(['width', 'height']));
  $dimension_attributes = array_intersect_key($variables['attributes'], $dimension_keys);

  // Calculate other dimension if only one has been specified:
  if (count($dimension_attributes) == 1) {
    $icon_list = $icons_manager->getIcons();

    $source_icon_data = isset($icon_list[$variables['id']]) ?
      $icon_list[$variables['id']] :
      ['width' => 1, 'height' => 1];

    $aspect_ratio = $source_icon_data['height'] / $source_icon_data['width'];
    $existing_length = reset($dimension_attributes);
    $missing_length_key = key(array_diff_key($dimension_keys, $dimension_attributes));

    // Flip aspect ratio value for calculating width.
    if ($missing_length_key == 'width') {
      $aspect_ratio = 1 / $aspect_ratio;
    }

    $variables['attributes'][$missing_length_key] = round($existing_length * $aspect_ratio, 2);
  }

  $variables['hash'] = $icons_manager->getHash();
}

/**
 * Returns HTML for an external-use SVG icon.
 *
 * @param array $variables
 *   An associative array containing:
 *   - attributes: HTML attributes array to apply to the SVG element.
 *   - sheet_url: The url to the icon sprite sheet.
 *   - hash: Content hash of the sprite sheet for version cache-busting.
 *   - id: The ID of the icon to use.
 *
 * @ingroup themeable
 */
function theme_ex_icon(array &$variables) {
  return '<svg' . drupal_attributes($variables['attributes']) . '>'
    . '<use xlink:href="' . "$variables[sheet_url]?$variables[hash]#$variables[id]" . '"/>'
    . '</svg>';
}

/**
 * Implements hook_page_build().
 */
function ex_icons_page_build(&$page) {
  if ($inline_defs = ex_icons_get_manager()->getInlineDefs()) {
    $page['page_top']['ex_icons_inline_defs'] = array(
      '#prefix' => '<svg class="element-invisible">',
      '#markup' => $inline_defs,
      '#suffix' => '</svg>',
    );
  }
}
