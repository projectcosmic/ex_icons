<?php

/**
 * @file
 * External-use icons module.
 */

/**
 * Implements hook_theme().
 */
function ex_icons_theme() {
  return [
    'ex_icon' => [
      'variables' => [
        'id' => NULL,
        'attributes' => [],
      ],
    ],
  ];
}

/**
 * Prepares variables for svg icon templates.
 *
 * Default template: ex-icon.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - id: The XML id value of the symbol element in the SVG sprite sheet.
 *   - attributes: The HTML attributes to apply to the SVG element.
 */
function template_preprocess_ex_icon(array &$variables) {
  $icons_manager = \Drupal::service('ex_icons.icons_manager');
  $variables['sheet_url'] = $icons_manager->getSheetUrl();

  // Default role to be img.
  if (!isset($variables['attributes']['role'])) {
    $variables['attributes']['role'] = 'img';
  }

  $dimension_keys = &drupal_static(__FUNCTION__, array_flip(['width', 'height']));
  $dimension_attributes = array_intersect_key($variables['attributes'], $dimension_keys);

  // Calculate other dimension if only one has been specified:
  if (count($dimension_attributes) == 1) {
    $icon_list = $icons_manager->getIcons();

    $source_icon_data = isset($icon_list[$variables['id']]) ?
      $icon_list[$variables['id']] :
      ['width' => 1, 'height' => 1];

    $aspect_ratio = $source_icon_data['height'] / $source_icon_data['width'];
    $existing_length = reset($dimension_attributes);
    $missing_length_key = key(array_diff_key($dimension_keys, $dimension_attributes));

    // Flip aspect ratio value for calculating width.
    if ($missing_length_key == 'width') {
      $aspect_ratio = 1 / $aspect_ratio;
    }

    $variables['attributes'][$missing_length_key] = round($existing_length * $aspect_ratio, 2);
  }

  $variables['hash'] = $icons_manager->getHash();

  \Drupal::service('renderer')->addCacheableDependency($variables, $icons_manager);
}

/**
 * Implements hook_preprocess_HOOK() for radios.html.twig.
 */
function ex_icons_preprocess_radios(&$variables) {
  if ($variables['element']['#type'] == 'ex_icon_select') {
    $variables['attributes']['class'][] = 'icon-selector';
    $variables['#attached']['library'][] = 'ex_icons/icon-selector';
  }
}

/**
 * Implements hook_preprocess_HOOK() for form-element-label.html.twig.
 */
function ex_icons_preprocess_form_element_label(&$variables) {
  // If #markup is an array, then check whether it is an SVG icon render array
  // from ex_icon_select form element.
  if (
    // Check if markup is an array.
    isset($variables['title']['#markup']) &&
    is_array($variables['title']['#markup']) &&
    // Check if the array is for an icon.
    isset($variables['title']['#markup']['#theme']) &&
    $variables['title']['#markup']['#theme'] == 'ex_icon'
  ) {
    $variables['title'] = $variables['title']['#markup'];
  }
}

/**
 * Implements hook_page_bottom().
 */
function ex_icons_icons_page_bottom(array &$page_bottom) {
  $icons_manager = \Drupal::service('ex_icons.icons_manager');

  $defs = [];

  $inline_defs = $icons_manager->getInlineDefs();
  if ($inline_defs) {
    $defs = [
      '#type' => 'inline_template',
      '#template' => '<svg{{ attributes }}>{{ defs|raw }}</svg>',
      '#context' => [
        'attributes' => new Attribute(['class' => ['visually-hidden']]),
        'defs' => $inline_defs,
      ],
    ];
  }

  \Drupal::service('renderer')->addCacheableDependency($defs, $icons_manager);
  $page_bottom['ex_icons_inline_defs'] = $defs;
}

/**
 * Implements hook_page_attachments().
 */
function ex_icons_page_attachments(array &$attachments) {
  $icons_manager = \Drupal::service('ex_icons.icons_manager');
  $attachments['#attached']['drupalSettings']['exIcons'] = [
    'basePath' => $icons_manager->getSheetUrl(),
    'hash' => $icons_manager->getHash(),
    'full' => $icons_manager->getSheetUrl() . '?' . $icons_manager->getHash(),
  ];
}
